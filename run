#!/usr/bin/env bash

INSTALL_DIR=".install"

RED="\e[31m"
GREEN="\e[32m"
YELLOW="\e[33m"
BLUE="\e[34m"
NOCOLOR="\e[0m"

# HELP #
display_usage() {
    echo "\
Usage:
  run [command]
HELP
  help              h       show list of commands
DOCKER COMMAND
  build_container   build
  run_container     run
  build_and_run     bnr
  connect_container co
  stop_container    stop
  stop_and_remove   snr
INSTALLING COMMAND
  install <script>  i       install specific script from '$INSTALL_DIR' directory";

  exit 0
}

##############
### DOCKER ###
##############

build_container() {
	docker build -t php-apache-img .
}

run_container() {
	docker run -it -d -v .:/var/www -p 8123:80 --name phpapache php-apache-img
}
	
build_and_run() {
	bash build_container
	bash run_container
}

connect_container() {
	docker exec -it phpapache bash
}

stop_container() {
	docker container stop phpapache 
}

remove_container() {
	docker container remove phpapache
}

stop_and_remove() {
	bash stop_container
	bash remove_container
}

###############
### INSTALL ###
###############

install() {
    if [[ -z "$@" ]]; then
        echo "Empty installation option."
        exit 1
    fi

    INSTALL_SCRIPTS=$(ls ${INSTALL_DIR} | tr "\n" " ")
    INSTALL_SCRIPTS_SHOW=$(ls ${INSTALL_DIR})

    for i in "$@"; do
        case $i in
            list|ls)
                echo -e "\n*** List of available scripts in '${YELLOW}$INSTALL_DIR${NOCOLOR}' directory ***"
                echo -e "${BLUE}$INSTALL_SCRIPTS_SHOW${NOCOLOR}"
            ;;
            *)
                for script in ${INSTALL_SCRIPTS[@]}; do
                    if [[ "$@" == "$script" ]]; then
                        echo "Installing '$script'"
                        sh -c "bash $INSTALL_DIR/$script"
                        exit 0
                    fi
                done
                echo "'$@' not found."
                exit 1
            ;;
        esac
    done
    exit 0
}

for i in "$@"; do
    case $i in
        # install
        install|i)
            install $2
        ;;
        # docker
        build_container|build)
            build_container
        ;;
        run_container|run)
            run_container
        ;;
        build_and_run|bnr)
            build_container
            run_container
        ;;
        connect_container|co)
            connect_container
        ;;
        stop_container|stop)
            stop_container
        ;;
        remove_container|rm)
            remove_container
        ;;
        stop_and_remove|snr)
            stop_container
            remove_container
        ;;
        # help
        help|h|--help)
            display_usage
        ;;
    esac
done

display_usage
exit 0
